
Sumo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000885  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000636  00000000  00000000  00000ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000014cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000370  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
    config_wheels(); 
  6c:	0e 94 65 00 	call	0xca	; 0xca <config_wheels>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	2f e3       	ldi	r18, 0x3F	; 63
  72:	8d e0       	ldi	r24, 0x0D	; 13
  74:	93 e0       	ldi	r25, 0x03	; 3
  76:	21 50       	subi	r18, 0x01	; 1
  78:	80 40       	sbci	r24, 0x00	; 0
  7a:	90 40       	sbci	r25, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0xa>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <main+0x14>
  80:	00 00       	nop
    while (1) 
    {
		_delay_ms(1000); 
		w_forwards(); 
  82:	0e 94 6c 00 	call	0xd8	; 0xd8 <w_forwards>
  86:	2f e3       	ldi	r18, 0x3F	; 63
  88:	8d e0       	ldi	r24, 0x0D	; 13
  8a:	93 e0       	ldi	r25, 0x03	; 3
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
		_delay_ms(1000); 
		w_backwards(); 
  98:	0e 94 73 00 	call	0xe6	; 0xe6 <w_backwards>
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
		_delay_ms(1000);
		w_right(); 
  ae:	0e 94 7a 00 	call	0xf4	; 0xf4 <w_right>
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	8d e0       	ldi	r24, 0x0D	; 13
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
		_delay_ms(1000); 
		w_left(); 
  c4:	0e 94 81 00 	call	0x102	; 0x102 <w_left>
  c8:	d3 cf       	rjmp	.-90     	; 0x70 <main+0x4>

000000ca <config_wheels>:
#include "wheels.h"

void config_wheels() {
	DDRW = (1 << RW_IN1)|(1 << RW_IN2)|(1 << LW_IN1)|(1 << LW_IN2);
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <_enable_all>:
}

void _enable_all() {
	PORTW |= (1 << RW_IN1)|(1 << LW_IN1)|(1 << RW_IN2)|(1 << LW_IN2);
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	8f 60       	ori	r24, 0x0F	; 15
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	08 95       	ret

000000d8 <w_forwards>:
}

void w_forwards() {
	_enable_all();
  d8:	0e 94 68 00 	call	0xd0	; 0xd0 <_enable_all>
	PORTW ^= ((1 << RW_IN2)|(1 << LW_IN2));
  dc:	92 b3       	in	r25, 0x12	; 18
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	89 27       	eor	r24, r25
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	08 95       	ret

000000e6 <w_backwards>:
}

void w_backwards() {
	_enable_all();
  e6:	0e 94 68 00 	call	0xd0	; 0xd0 <_enable_all>
	PORTW ^= ((1 << RW_IN1)|(1 << LW_IN1));
  ea:	92 b3       	in	r25, 0x12	; 18
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	89 27       	eor	r24, r25
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	08 95       	ret

000000f4 <w_right>:
}

void w_right() {
	_enable_all();
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <_enable_all>
	PORTW ^= ((1 << RW_IN1)|(1 << LW_IN2));
  f8:	92 b3       	in	r25, 0x12	; 18
  fa:	89 e0       	ldi	r24, 0x09	; 9
  fc:	89 27       	eor	r24, r25
  fe:	82 bb       	out	0x12, r24	; 18
 100:	08 95       	ret

00000102 <w_left>:
}

void w_left() {
	_enable_all();
 102:	0e 94 68 00 	call	0xd0	; 0xd0 <_enable_all>
	PORTW ^= ((1 << RW_IN2)^(1 << LW_IN1));
 106:	92 b3       	in	r25, 0x12	; 18
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	89 27       	eor	r24, r25
 10c:	82 bb       	out	0x12, r24	; 18
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
